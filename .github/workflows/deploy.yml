name: Deploy to AWS Lightsail
# Testing Docker push to existing registries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  FRONTEND_SERVICE_NAME: qr-scanner-frontend
  BACKEND_SERVICE_NAME: qr-scanner-backend
  LOAD_BALANCER_NAME: qr-scanner-lb

jobs:
  # Build and deploy frontend and backend in parallel using matrix strategy
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - app: frontend
            dockerfile: frontend/Dockerfile
            context: frontend
            port: 80
            service_name: qr-scanner-frontend
            domain: orderkaro.co.in
          - app: backend
            dockerfile: backend/Dockerfile
            context: backend
            port: 5001
            service_name: qr-scanner-backend
            domain: api.orderkaro.co.in

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build Docker image
          docker build -t $ECR_REGISTRY/${{ matrix.service_name }}:$IMAGE_TAG -f ${{ matrix.dockerfile }} ${{ matrix.context }}
          
          # Tag with latest for easier reference
          docker tag $ECR_REGISTRY/${{ matrix.service_name }}:$IMAGE_TAG $ECR_REGISTRY/${{ matrix.service_name }}:latest
          
          # Push both tags
          docker push $ECR_REGISTRY/${{ matrix.service_name }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ matrix.service_name }}:latest
          
          echo "image=$ECR_REGISTRY/${{ matrix.service_name }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to Lightsail Container Service
        run: |
          # Get the Lightsail container service
          SERVICE_NAME=${{ matrix.service_name }}
          IMAGE_URI=${{ steps.build-image.outputs.image }}
          
          echo "Deploying $SERVICE_NAME with image: $IMAGE_URI"
          
          # Set environment variables based on service type
          if [ "${{ matrix.app }}" = "frontend" ]; then
            ENV_VARS='{
              "NODE_ENV": "production",
              "PORT": "'${{ matrix.port }}'",
              "VITE_API_URL": "http://qr-scanner-backend:5001/api"
            }'
          else
            ENV_VARS='{
              "NODE_ENV": "production",
              "PORT": "'${{ matrix.port }}'",
              "DB_HOST": "your-rds-endpoint",
              "DB_USER": "your-db-user",
              "DB_PASS": "your-db-password",
              "DB_NAME": "qr_ordering_db",
              "JWT_SECRET": "your-jwt-secret",
              "CORS_ORIGIN": "https://orderkaro.co.in"
            }'
          fi
          
          # Update the container service with new image
          aws lightsail put-container-service-deployment \
            --service-name $SERVICE_NAME \
            --public-endpoint containerName=${{ matrix.app }},containerPort=${{ matrix.port }},healthCheckPath=/health \
            --containers '{
              "'${{ matrix.app }}'": {
                "image": "'$IMAGE_URI'",
                "ports": {
                  "'${{ matrix.port }}'": "HTTP"
                },
                "environment": '$ENV_VARS'
              }
            }' \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for ${{ matrix.service_name }} deployment to complete..."
          aws lightsail wait container-service-deployment-completed \
            --service-name ${{ matrix.service_name }} \
            --region ${{ env.AWS_REGION }}

      - name: Update Load Balancer Configuration
        if: matrix.app == 'frontend'
        run: |
          # Update load balancer to point to the new frontend service
          aws lightsail put-container-service-deployment \
            --service-name ${{ env.LOAD_BALANCER_NAME }} \
            --public-endpoint containerName=frontend,containerPort=80,healthCheckPath=/ \
            --containers '{
              "frontend": {
                "image": "${{ steps.build-image.outputs.image }}",
                "ports": {
                  "80": "HTTP"
                }
              }
            }' \
            --region ${{ env.AWS_REGION }}

      - name: Configure SSL Certificate
        if: matrix.app == 'frontend'
        run: |
          # Request SSL certificate for the domain
          aws lightsail create-certificate \
            --certificate-name ${{ matrix.domain }}-cert \
            --domain-name ${{ matrix.domain }} \
            --subject-alternative-names ${{ matrix.domain }} \
            --region ${{ env.AWS_REGION }} || echo "Certificate may already exist"
          
          # Attach certificate to load balancer
          aws lightsail attach-certificate-to-distribution \
            --distribution-name ${{ env.LOAD_BALANCER_NAME }} \
            --certificate-name ${{ matrix.domain }}-cert \
            --region ${{ env.AWS_REGION }}

      - name: Health Check
        run: |
          # Get the service URL
          SERVICE_URL=$(aws lightsail get-container-service \
            --service-name ${{ matrix.service_name }} \
            --query 'containerService.url' \
            --output text \
            --region ${{ env.AWS_REGION }})
          
          echo "Service URL: $SERVICE_URL"
          
          # Wait for service to be healthy
          for i in {1..30}; do
            if curl -f "$SERVICE_URL/health" > /dev/null 2>&1; then
              echo "✅ ${{ matrix.app }} service is healthy"
              break
            else
              echo "⏳ Waiting for ${{ matrix.app }} service to be healthy... ($i/30)"
              sleep 10
            fi
          done

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ ${{ matrix.app }} deployment successful"
          else
            echo "❌ ${{ matrix.app }} deployment failed"
          fi
