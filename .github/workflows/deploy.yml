name: Deploy to AWS Lightsail - Fixed

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 076481189581.dkr.ecr.us-east-1.amazonaws.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - app: frontend
            dockerfile: frontend/Dockerfile
            context: frontend
            port: 80
            service_name: qr-scanner-frontend
            domain: orderkaro.co.in
          - app: backend
            dockerfile: backend/Dockerfile
            context: backend
            port: 5001
            service_name: qr-scanner-backend
            domain: api.orderkaro.co.in

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/${{ matrix.service_name }}:$IMAGE_TAG -f ${{ matrix.dockerfile }} ${{ matrix.context }}
          docker push $ECR_REGISTRY/${{ matrix.service_name }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ matrix.service_name }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to Lightsail
        run: |
          # Create deployment configuration file
          if [ "${{ matrix.app }}" = "frontend" ]; then
            cat > deployment-config.json << EOF
          {
            "publicEndpoint": {
              "containerName": "${{ matrix.app }}",
              "containerPort": ${{ matrix.port }},
              "healthCheck": {
                "path": "/health"
              }
            },
            "containers": {
              "${{ matrix.app }}": {
                "image": "${{ steps.build-image.outputs.image }}",
                "ports": {
                  "${{ matrix.port }}": "HTTP"
                },
                "environment": {
                  "NODE_ENV": "production",
                  "PORT": "${{ matrix.port }}",
                  "VITE_API_URL": "http://qr-scanner-backend:5001/api"
                }
              }
            }
          }
          EOF
          else
            cat > deployment-config.json << EOF
          {
            "publicEndpoint": {
              "containerName": "${{ matrix.app }}",
              "containerPort": ${{ matrix.port }},
              "healthCheck": {
                "path": "/health"
              }
            },
            "containers": {
              "${{ matrix.app }}": {
                "image": "${{ steps.build-image.outputs.image }}",
                "ports": {
                  "${{ matrix.port }}": "HTTP"
                },
                "environment": {
                  "NODE_ENV": "production",
                  "PORT": "${{ matrix.port }}",
                  "DB_HOST": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "qrscanner",
                  "DB_USER": "postgres",
                  "DB_PASSWORD": "password",
                  "JWT_SECRET": "your-jwt-secret-key",
                  "CORS_ORIGIN": "https://orderkaro.co.in"
                }
              }
            }
          }
          EOF
          fi
          
          # Deploy the container to Lightsail using the config file
          aws lightsail create-container-service-deployment \
            --service-name ${{ matrix.service_name }} \
            --cli-input-json file://deployment-config.json \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment
        run: |
          echo "Waiting for ${{ matrix.service_name }} deployment to complete..."
          # Wait for deployment to be ready
          for i in {1..20}; do
            STATUS=$(aws lightsail get-container-services \
              --service-name ${{ matrix.service_name }} \
              --query 'containerServices[0].state' \
              --output text \
              --region ${{ env.AWS_REGION }} 2>/dev/null || echo "PENDING")
            
            if [ "$STATUS" = "READY" ]; then
              echo "✅ Deployment completed successfully"
              break
            else
              echo "⏳ Waiting for deployment... ($i/20) - Status: $STATUS"
              sleep 30
            fi
          done

      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(aws lightsail get-container-services \
            --service-name ${{ matrix.service_name }} \
            --query 'containerServices[0].url' \
            --output text \
            --region ${{ env.AWS_REGION }} 2>/dev/null || echo "https://${{ matrix.service_name }}.cw27w5415mg9y.us-east-1.cs.amazonlightsail.com")
          
          echo "Service URL: $SERVICE_URL"
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Health Check
        run: |
          SERVICE_URL="${{ steps.get-url.outputs.url }}"
          echo "Testing health endpoint: $SERVICE_URL/health"
          
          # Wait for service to be healthy
          for i in {1..10}; do
            if curl -f "$SERVICE_URL/health" > /dev/null 2>&1; then
              echo "✅ ${{ matrix.app }} service is healthy"
              break
            else
              echo "⏳ Waiting for ${{ matrix.app }} service to be healthy... ($i/10)"
              sleep 30
            fi
          done

      - name: Configure Domain (Frontend only)
        if: matrix.app == 'frontend'
        run: |
          echo "🌐 Frontend will be available at: https://${{ matrix.domain }}"
          echo "🔧 Backend API will be available at: https://${{ matrix.domain }}/api"
          echo "📊 Health check: https://${{ matrix.domain }}/health"
